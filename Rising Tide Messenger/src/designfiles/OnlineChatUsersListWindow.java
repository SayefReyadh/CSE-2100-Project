/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package designfiles;

import clientproject.ClientInfo;
import clientproject.ClientReciever;
import static clientproject.ClientReciever.chattingWith;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import rising.tide.messenger.RisingTideMessenger;

/**
 *
 * @author Shaafi
 */
public class OnlineChatUsersListWindow extends javax.swing.JFrame {
    
    int xMouse, yMouse;

    public String onlineUserNameString;
    public List<String> users = new ArrayList<>();
    ChatWindow ob;

    /**
     * Creates new form OnlineChatUsersList
     */
    public OnlineChatUsersListWindow() {
        initComponents();
        
        RisingTideMessenger.defaultIconCreator(OnlineChatUsersListWindow.this, onlineUserNameString);
    }

    public void startChat()
    {
        String us = onlineUserList.getSelectedValue();
        ChatWindow temp = chattingWith.get(us);
        if (us != null && !us.equalsIgnoreCase("No online user!") && temp == null) {
            ClientInfo.clientInfoObject.getClientWriterInstance().writeToClient(us, "*chat*");
            
        } else if (temp != null) {
            temp.setVisible(true);
            temp.repaint();
        }
    }
    
    
    public void logoutProcess()
    {
        System.out.println("Logging Out");
        for (Map.Entry<String, ChatWindow> instance : ClientReciever.chattingWith.entrySet()) {
            ClientInfo.clientInfoObject.getClientWriterInstance().writeToClient(instance.getKey(), ClientInfo.clientInfoObject.getUserName() + " HAS LOGGED OUT. SESSON TERMINATED");
            String msg = instance.getValue().getMessageBox().getText();
            
            System.out.println(msg);
            String str = ClientInfo.clientInfoObject.getUserName() + "-" + instance.getKey() + "-" + msg;
            str = str + "\t___Session Ended___\r\n\n\n\n\t___New session___\n\n";
            String repl = str.replaceAll("(\\r|\\n|\\r\\n)+", "\\~");
            System.out.println(repl);
            ClientInfo.clientInfoObject.getClientWriterInstance().writeToClient("SERVERHISTORYINSERT", repl);
            instance.getValue().dispose();
        }
        
        ClientInfo.clientInfoObject.getClientWriterInstance().writeToClient("SERVER", "*LogOut*");
    }

    
//added by shaafi 17-7-16 as this will update the online list when a user login or logout
    public static void updateOnlineUserList(String onlineUserNameString, String thisUser) {

        
        DefaultListModel model = new DefaultListModel();
        if (onlineUserNameString != null) {
            String[] onlineUsersSentFromServer = onlineUserNameString.split("-");
            for (String nameString : onlineUsersSentFromServer) {
                System.out.println(nameString);
            }
            for (String user : onlineUsersSentFromServer) {
                System.out.println("user: " + user);
                if (!user.equals(thisUser)) {
                    System.out.println("user: " + user + "this user: " + thisUser);
                    model.addElement(user);
                }
            }
        } else {
            model.addElement("No online user!");
        }

        if (model.size() == 0) {
            model.addElement("No online user!");
        }

        onlineUserList.setModel(model);
        
        onlineUserList.setCellRenderer(new ChatListCellRenderer());
    }

    public void setUserNameLabel(String name) {
        userNameLabel.setText(name);
    }
    public void setUserImage(byte [] image) {
        ImageIcon icon = new ImageIcon(image);
        Image ob = icon.getImage();
        Image im2 = ob.getScaledInstance(userImage.getWidth(), userImage.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon ic = new ImageIcon(im2);
        userImage.setIcon(ic);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        onlineUserListScrollPane = new javax.swing.JScrollPane();
        onlineUserList = new javax.swing.JList<>();
        chatLabel = new javax.swing.JLabel();
        logoutLabel = new javax.swing.JLabel();
        welcomeLabel = new javax.swing.JLabel();
        userNameLabel = new javax.swing.JLabel();
        onlineUserLabel = new javax.swing.JLabel();
        userImage = new javax.swing.JLabel();
        closing = new javax.swing.JLabel();
        minimize = new javax.swing.JLabel();
        toolbarLabel = new javax.swing.JLabel();
        border = new javax.swing.JLabel();
        aboutus = new javax.swing.JLabel();
        frame = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 153, 153));
        setLocation(new java.awt.Point(500, 150));
        setMaximumSize(new java.awt.Dimension(730, 615));
        setMinimumSize(new java.awt.Dimension(730, 615));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(730, 615));
        setResizable(false);
        setSize(new java.awt.Dimension(730, 615));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setInheritsPopupMenu(true);
        jPanel1.setMaximumSize(new java.awt.Dimension(730, 615));
        jPanel1.setMinimumSize(new java.awt.Dimension(730, 615));
        jPanel1.setPreferredSize(new java.awt.Dimension(730, 615));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        onlineUserList.setBackground(new java.awt.Color(204, 204, 204));
        onlineUserList.setBorder(new javax.swing.border.MatteBorder(null));
        onlineUserList.setFont(new java.awt.Font("Tekton Pro", 0, 24)); // NOI18N
        onlineUserList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        onlineUserList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onlineUserListMouseClicked(evt);
            }
        });
        onlineUserListScrollPane.setViewportView(onlineUserList);

        jPanel1.add(onlineUserListScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 180, 300, 410));

        chatLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/chat_button_logo.png"))); // NOI18N
        chatLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chatLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chatLabelMouseClicked(evt);
            }
        });
        jPanel1.add(chatLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 430, -1, 60));

        logoutLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logout_logo.png"))); // NOI18N
        logoutLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logoutLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutLabelMouseClicked(evt);
            }
        });
        jPanel1.add(logoutLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 500, 170, 50));

        welcomeLabel.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 36)); // NOI18N
        welcomeLabel.setForeground(new java.awt.Color(204, 204, 204));
        welcomeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcomeLabel.setText("WELCOME");
        jPanel1.add(welcomeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 150, 260, -1));

        userNameLabel.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 24)); // NOI18N
        userNameLabel.setForeground(new java.awt.Color(204, 204, 204));
        userNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userNameLabel.setText("UserNameLabel");
        jPanel1.add(userNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 200, 260, 50));

        onlineUserLabel.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 24)); // NOI18N
        onlineUserLabel.setForeground(new java.awt.Color(204, 204, 204));
        onlineUserLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        onlineUserLabel.setText("Online Users");
        jPanel1.add(onlineUserLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 130, -1, -1));

        userImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logo.png"))); // NOI18N
        userImage.setText("userImage");
        jPanel1.add(userImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 260, 130, 130));

        closing.setToolTipText("Close");
        closing.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        closing.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closingMouseClicked(evt);
            }
        });
        jPanel1.add(closing, new org.netbeans.lib.awtextra.AbsoluteConstraints(686, 14, 38, 38));

        minimize.setToolTipText("Minimize");
        minimize.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        minimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimizeMouseClicked(evt);
            }
        });
        jPanel1.add(minimize, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 14, 38, 38));

        toolbarLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                toolbarLabelMouseDragged(evt);
            }
        });
        toolbarLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                toolbarLabelMousePressed(evt);
            }
        });
        jPanel1.add(toolbarLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 730, 100));

        border.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/border.jpg"))); // NOI18N
        border.setText("jLabel1");
        jPanel1.add(border, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 250, 150, 150));

        aboutus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aboutus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logoABoutUs.png"))); // NOI18N
        aboutus.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        aboutus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aboutusMouseClicked(evt);
            }
        });
        jPanel1.add(aboutus, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 550, -1, -1));

        frame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/chat_bg.png"))); // NOI18N
        frame.setText("jLabel2");
        frame.setMaximumSize(new java.awt.Dimension(730, 615));
        frame.setMinimumSize(new java.awt.Dimension(730, 615));
        frame.setPreferredSize(new java.awt.Dimension(730, 615));
        jPanel1.add(frame, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
        logoutProcess();
        
        close();
    }//GEN-LAST:event_formWindowClosing

    private void onlineUserListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onlineUserListMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            startChat();
        }
    }//GEN-LAST:event_onlineUserListMouseClicked

    private void minimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeMouseClicked
                         this.setState(Frame.ICONIFIED);           // TODO add your handling code here:
    }//GEN-LAST:event_minimizeMouseClicked

    private void closingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closingMouseClicked
             close();        // TODO add your handling code here:
    }//GEN-LAST:event_closingMouseClicked

    private void toolbarLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toolbarLabelMousePressed
        // TODO add your handling code here:
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_toolbarLabelMousePressed

    private void toolbarLabelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toolbarLabelMouseDragged
        // TODO add your handling code here:
        this.setLocation(evt.getXOnScreen() - xMouse, evt.getYOnScreen() - yMouse);
    }//GEN-LAST:event_toolbarLabelMouseDragged

    private void chatLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chatLabelMouseClicked
        // TODO add your handling code here:
        startChat();
    }//GEN-LAST:event_chatLabelMouseClicked

    private void logoutLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutLabelMouseClicked
        // TODO add your handling code here:
        logoutProcess();
        new Login().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logoutLabelMouseClicked

    private void aboutusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutusMouseClicked
        // TODO add your handling code here:
        new AboutUs().setVisible(true);
    }//GEN-LAST:event_aboutusMouseClicked

    public void close() {

        WindowEvent winClosingEvent = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OnlineChatUsersListWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aboutus;
    private javax.swing.JLabel border;
    private javax.swing.JLabel chatLabel;
    private javax.swing.JLabel closing;
    private javax.swing.JLabel frame;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel logoutLabel;
    private javax.swing.JLabel minimize;
    private javax.swing.JLabel onlineUserLabel;
    private static javax.swing.JList<String> onlineUserList;
    private javax.swing.JScrollPane onlineUserListScrollPane;
    private javax.swing.JLabel toolbarLabel;
    private javax.swing.JLabel userImage;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables

    public static class ChatListCellRenderer extends JLabel implements ListCellRenderer {

        public ChatListCellRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {

            setText((String) value);

            setFont(new Font("Tekton Pro", Font.PLAIN, 24));

            if (isSelected || cellHasFocus) {
                this.setBackground(Color.RED);
                this.setForeground(Color.WHITE);

                setFont(new Font("Tekton Pro", Font.PLAIN, 30));
            } else {
                this.setBackground(Color.WHITE);
                this.setForeground(Color.BLACK);
            }
            
            return this;
        }

    }
}
